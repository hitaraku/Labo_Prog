
/home/hitaraku/hobby/01-Git/programming/LLVM/myProject/Makefile,531
CXX=g++CXX1,0
CLANGXX=clang++CLANGXX2,8
PROJECT_DIR=.PROJECT_DIR3,24
SRC_DIR = $(PROJECT_DIR)/srcSRC_DIR5,39
INC_DIR = $(PROJECT_DIR)/incINC_DIR6,68
OBJ_DIR = $(PROJECT_DIR)/objOBJ_DIR7,97
BIN_DIR = $(PROJECT_DIR)/binBIN_DIR8,126
LIB_DIR = $(PROJECT_DIR)/libLIB_DIR9,155
OBJECTS=TokenStream.o main.o Parser.o AST.oOBJECTS11,185
INC_FLAGS= -c -g -Iinc -I/usr/include/x86_64-linux-gnu/c++/4.8 INC_FLAGS13,230
LLVM_CONFIG = llvm-configLLVM_CONFIG15,295
LLVM_FLAGS = --cxxflags --ldflags --libsLLVM_FLAGS16,321

/home/hitaraku/hobby/01-Git/programming/LLVM/myProject/src/Parser.cpp,1431
Parser::Parser(std::string filename){Parser5,71
bool Parser::doParse() {doParse9,152
TranslationUnitAST &Parser::getAST() {getAST18,307
bool Parser::visitTranslationUnit() {visitTranslationUnit26,435
TokenStream *Parser::LexicalAnalysis(std::string filename) {LexicalAnalysis47,890
bool Parser::visitExternalDeclaration(visitExternalDeclaration166,4539
PrototypeAST *Parser::visitFunctionDeclaration(){visitFunctionDeclaration191,5022
FunctionAST *Parser::visitFunctionDefinition(){visitFunctionDefinition223,5871
PrototypeAST *Parser	::visitPrototype(){visitPrototype254,6769
FunctionStatementAST *Parser::visitFunctionStatement(PrototypeAST *proto){visitFunctionStatement332,8498
VariableDeclarationAST *Parser::visitVariableDeclaration(){visitVariableDeclaration420,10625
BaseAST *Parser::visitStatement(){visitStatement454,11257
BaseAST *Parser::visitExpressionStatement(){visitExpressionStatement470,11563
BaseAST *Parser::visitJumpStatement(){visitJumpStatement491,12018
BaseAST *Parser::visitAssignmentExpression(){visitAssignmentExpression520,12610
BaseAST *Parser::visitAdditiveExpression(BaseAST *lhs){visitAdditiveExpression567,13752
BaseAST *Parser::visitMultiplicativeExpression(BaseAST *lhs){visitMultiplicativeExpression617,14819
BaseAST *Parser::visitPostfixExpression(){visitPostfixExpression667,15862
BaseAST *Parser::visitPrimaryExpression(){visitPrimaryExpression752,17809

/home/hitaraku/hobby/01-Git/programming/LLVM/myProject/src/TokenStream.cpp,265
TokenStream::~TokenStream() {~TokenStream7,102
Token TokenStream::getToken() {getToken14,234
bool TokenStream::getNextToken() {getNextToken18,301
bool TokenStream::ungetToken(int times) {ungetToken30,517
bool TokenStream::printTokens() {printTokens41,701

/home/hitaraku/hobby/01-Git/programming/LLVM/myProject/src/CodeGen.cpp,0

/home/hitaraku/hobby/01-Git/programming/LLVM/myProject/src/main.cpp,43
int main(int argc, char** argv)main7,130

/home/hitaraku/hobby/01-Git/programming/LLVM/myProject/src/AST.cpp,567
TranslationUnitAST::~TranslationUnitAST() {~TranslationUnitAST3,20
bool TranslationUnitAST::addPrototype(PrototypeAST *proto) {addPrototype15,287
bool TranslationUnitAST::addFunction(FunctionAST *func) {addFunction20,399
bool TranslationUnitAST::empty() {empty25,506
FunctionAST::~FunctionAST() {~FunctionAST33,654
FunctionStatementAST::~FunctionStatementAST() {~FunctionStatementAST38,734
bool FunctionStatementAST::addVariableDeclaration(VariableDeclarationAST *vdecl) {addVariableDeclaration50,1029
CallExprAST::~CallExprAST() {~CallExprAST55,1166

/home/hitaraku/hobby/01-Git/programming/LLVM/myProject/inc/Token.hpp,736
#define TOKEN_HPPTOKEN_HPP2,18
enum TokenType {TokenType7,75
  TOK_IDENTIFIER, TOK_IDENTIFIER8,92
  TOK_DIGIT, TOK_DIGIT9,111
  TOK_SYMBOL, TOK_SYMBOL10,125
  TOK_INT, TOK_INT11,140
  TOK_RETURN, TOK_RETURN12,152
  TOK_EOFTOK_EOF13,167
class Token {Token16,181
  TokenType c_type;c_type19,205
  std::string c_tokenString;c_tokenString20,225
  int c_number;c_number21,254
  int c_line;c_line22,270
  Token(std::string tokenString, TokenType type, int line) :Token25,293
  ~Token() {}~Token36,551
  TokenType getTokenType() { return c_type; }getTokenType38,566
  std::string getTokenString() { return c_tokenString; }getTokenString39,612
  int getNumberValue() { return c_number; }getNumberValue40,669

/home/hitaraku/hobby/01-Git/programming/LLVM/myProject/inc/AST.hpp,5757
#define AST_HPPAST_HPP2,16
enum AstID {AstID25,445
  BaseID,BaseID26,458
  TranslationUnitID,TranslationUnitID27,468
  PrototypeID,PrototypeID28,489
  FunctionID,FunctionID29,504
  FunctionStatementID,FunctionStatementID30,518
  VariableDeclarationID,VariableDeclarationID31,541
  BinaryExprID,BinaryExprID32,566
  NullExprID,NullExprID33,582
  CallExprID,CallExprID34,596
  JumpStatementID,JumpStatementID35,610
  VariableID,VariableID36,629
  NumberIDNumberID37,643
class BaseAST {BaseAST42,694
  AstID m_ID;m_ID44,719
  BaseAST(AstID id) : m_ID(id) {}BaseAST47,742
  virtual ~BaseAST() {}~BaseAST48,776
  AstID getValueID() const { return m_ID; }getValueID49,800
class TranslationUnitAST {TranslationUnitAST52,848
  std::vector<PrototypeAST*> m_Prototypes;m_Prototypes54,884
  std::vector<FunctionAST*> m_Functions;m_Functions55,927
  TranslationUnitAST() {}TranslationUnitAST58,977
  PrototypeAST *getPrototype(int i) {getPrototype63,1125
  FunctionAST *getFunction(int i) {getFunction70,1272
class PrototypeASTPrototypeAST80,1461
  std::string m_Name;m_Name83,1491
  std::vector<std::string> m_Params;m_Params84,1513
  PrototypeAST(const std::string &name, const std::vector<std::string> &params) :PrototypeAST87,1559
  std::string getName() { return m_Name; }getName90,1683
  std::string getParamName(int i) {getParamName91,1726
  int getParamNum() { return m_Params.size(); }getParamNum95,1838
class FunctionASTFunctionAST99,1931
  PrototypeAST *m_Proto;m_Proto102,1960
  FunctionStatementAST *m_Body;m_Body103,1985
  FunctionAST(PrototypeAST *proto, FunctionStatementAST *body) :FunctionAST106,2026
  std::string getName() { return m_Proto->getName(); }getName111,2151
  PrototypeAST *getPrototype() { return m_Proto; }getPrototype112,2206
  FunctionStatementAST *getBody() { return m_Body; }getBody113,2257
class FunctionStatementAST {FunctionStatementAST117,2365
  std::vector<VariableDeclarationAST*> m_VariableDecls;m_VariableDecls119,2403
  std::vector<BaseAST*> m_StatementLists;m_StatementLists120,2459
  FunctionStatementAST() {}FunctionStatementAST123,2510
  void addStatement(BaseAST *statement) { m_StatementLists.push_back(statement); }addStatement126,2627
  VariableDeclarationAST *getVariableDecl(int i) {getVariableDecl127,2710
  BaseAST *getStatement(int i) {getStatement134,2876
class VariableDeclarationAST : public BaseAST {VariableDeclarationAST143,3030
    param,param146,3103
    locallocal147,3114
  } DeclType;DeclType148,3124
  std::string m_Name;m_Name151,3148
  DeclType m_Type;m_Type152,3170
  VariableDeclarationAST(const std::string &name) :VariableDeclarationAST155,3198
  static inline bool classof(VariableDeclarationAST const*) { return true; }classof159,3308
  static inline bool classof(BaseAST const* base) {classof160,3385
  ~VariableDeclarationAST() {}~VariableDeclarationAST163,3497
  bool setDeclType(DeclType type) {setDeclType164,3528
  std::string getName() { return m_Name; }getName168,3604
  DeclType getType() { return m_Type; }getType169,3647
class BinaryExprAST : public BaseASTBinaryExprAST173,3729
  std::string m_Op;m_Op176,3777
  BaseAST *m_LHS, *m_RHS;m_LHS177,3797
  BaseAST *m_LHS, *m_RHS;m_RHS177,3797
  BinaryExprAST(std::string op, BaseAST *lhs, BaseAST *rhs) :BinaryExprAST180,3832
  ~BinaryExprAST() {~BinaryExprAST186,3971
  static inline bool classof(BinaryExprAST const*) { return true; }classof190,4044
  static inline bool classof(BaseAST const* base) {classof191,4112
  std::string getOp() { return m_Op; }getOp194,4215
  BaseAST *getLHS() { return m_LHS; }getLHS195,4254
  BaseAST *getRHS() { return m_RHS; }getRHS196,4292
class NullExprAST : public BaseAST {NullExprAST201,4359
  NullExprAST() : BaseAST(NullExprID) {}NullExprAST203,4404
  static inline bool classof(NullExprAST const*) { return true; }classof204,4445
  static inline bool classof(BaseAST const* base) {classof205,4511
class CallExprAST : public BaseAST {CallExprAST211,4651
  std::string m_Callee;m_Callee213,4697
  std::vector<BaseAST*> m_Args;m_Args214,4721
  CallExprAST(const std::string &callee, std::vector<BaseAST*> &args) :CallExprAST217,4762
  std::string getCallee() { return m_Callee; }getCallee223,4921
  BaseAST *getArgs(int i) {getArgs224,4968
  static inline bool classof(CallExprAST const*) { return true; }classof231,5086
  static inline bool classof(BaseAST const* base) {classof232,5152
class JumpStatementAST : public BaseAST {JumpStatementAST237,5257
  BaseAST *m_Expr;m_Expr239,5308
  JumpStatementAST(BaseAST *expr) :JumpStatementAST242,5336
  ~JumpStatementAST() { SAFE_DELETE(m_Expr); }~JumpStatementAST246,5420
  BaseAST *getExpr() { return m_Expr; }getExpr247,5467
  static inline bool classof(JumpStatementAST const*) { return true; }classof248,5507
  static inline bool classof(BaseAST const* base) {classof249,5578
class VariableAST : public BaseAST {VariableAST254,5688
  std::string m_Name;m_Name256,5734
  VariableAST(const std::string &name) :VariableAST259,5765
  ~VariableAST() {}~VariableAST263,5853
  static inline bool classof(VariableAST const*) { return true; }classof264,5873
  static inline bool classof(BaseAST const* base) {classof265,5939
  std::string getName() { return m_Name; }getName268,6040
class NumberAST : public BaseAST {NumberAST271,6087
  int m_Val;m_Val273,6131
  NumberAST(int val) :NumberAST276,6153
  ~NumberAST() {}~NumberAST280,6215
  int getNumberValue() { return m_Val; }getNumberValue281,6233
  static inline bool classof(NumberAST const*) { return true; }classof282,6274
  static inline bool classof(BaseAST const* base) {classof283,6338

/home/hitaraku/hobby/01-Git/programming/LLVM/myProject/inc/APP.hpp,78
#define SAFE_DELETE(SAFE_DELETE3,17
#define SAFE_DELETEA(SAFE_DELETEA4,59

/home/hitaraku/hobby/01-Git/programming/LLVM/myProject/inc/CodeGen.hpp,191
#define CODE_GENCODE_GEN2,17
class CodeGenCodeGen26,589
  llvm::Function *m_CurFunc;m_CurFunc29,614
  llvm::Module *m_Mod;m_Mod30,643
  llvm::IRBuilder<> *m_Builder;m_Builder31,666

/home/hitaraku/hobby/01-Git/programming/LLVM/myProject/inc/Parser.hpp,424
#define PARSER_HPPPARSER_HPP2,19
class Parser {Parser16,234
  TokenStream *m_Tokens;m_Tokens18,258
  TranslationUnitAST *m_TU;m_TU19,283
  std::vector<std::string> m_VariableTable;m_VariableTable22,348
  std::map<std::string, int> m_PrototypeTable;m_PrototypeTable23,392
  std::map<std::string, int> m_FunctionTable;m_FunctionTable24,439
  ~Parser(){ SAFE_DELETE(m_TU); SAFE_DELETE(m_Tokens); }~Parser28,526

/home/hitaraku/hobby/01-Git/programming/LLVM/myProject/inc/TokenStream.hpp,707
#define TOKENSTREAM_HPPTOKENSTREAM_HPP2,24
class TokenStream {TokenStream7,89
  std::vector<Token*> c_tokens;c_tokens9,118
  int c_curIndex;c_curIndex10,150
  TokenStream() : c_curIndex(0) {}TokenStream14,178
  bool pushToken(Token *token) {pushToken19,287
  TokenType getCurType() { return c_tokens[c_curIndex]->getTokenType(); }getCurType24,392
  std::string getCurString() { return c_tokens[c_curIndex]->getTokenString(); }getCurString25,466
  int getCurNumVal() { return c_tokens[c_curIndex]->getNumberValue(); }getCurNumVal26,546
  int getCurIndex() { return c_curIndex; }getCurIndex28,640
  bool applyTokenIndex(int index) { c_curIndex=index; return true; }applyTokenIndex29,683
